<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>serverless on GuangzhengLi</title><link>https://guangzhengli.com/tags/serverless/</link><description>Recent content in serverless on GuangzhengLi</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>iguangzhengli@gmail.com (Guangzheng Li)</managingEditor><webMaster>iguangzhengli@gmail.com (Guangzheng Li)</webMaster><copyright>2024 GuangzhengLi All rights reserved</copyright><lastBuildDate>Mon, 19 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://guangzhengli.com/tags/serverless/index.xml" rel="self" type="application/rss+xml"/><item><title>用 serverless 开发一个 Chat 机器人提醒</title><link>https://guangzhengli.com/blog/zh/webhook-with-serverless/</link><pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate><author>iguangzhengli@gmail.com (Guangzheng Li)</author><guid>https://guangzhengli.com/blog/zh/webhook-with-serverless/</guid><description>&lt;p>本文描述了笔者基于 Serverless 技术开发 Chat 机器人提醒应用的全流程，记录了开发遇到的一些问题和技术选择的思考。在开发完成后，有小伙伴想知道一些技术细节来做二次开发，于是有了这篇分享。&lt;/p>
&lt;h2 id="业务需求">业务需求&lt;/h2>
&lt;p>最开始想开发一个 Chat 机器人提醒，是因为当时项目上的人很多，每天都需要轮换站会和 Code Review 的 Owner，导致每天的站会和 Code Review 时，都需要先花费几分钟时间确认今天的站会 Owner 是谁，接着确定后还要准备 Share 屏幕，最后还需要手动维护项目人员轮换名单，会议的体验很差。为了解决以下的常规会议的痛点：&lt;/p>
&lt;ul>
&lt;li>杜绝会议开始时常见的灵魂问题，今天的 owner 是谁&lt;/li>
&lt;li>缩短会议的准备时间，预防 owner 没有提前去会议室准备的情况&lt;/li>
&lt;li>预防到时间后，有人忘记参加会议，需要人手动提醒&lt;/li>
&lt;/ul>
&lt;p>所以有了第一个想法💡，即做一个自动提醒的机器人，包括有如下功能来缓解痛点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定时发送消息&lt;/p>
&lt;ul>
&lt;li>在工作日时，在会议开始前5分钟时，发送提醒文本。&lt;/li>
&lt;li>在周末，不发送消息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>当发送文本消息时，文本包括会议地址，owner，和会议时间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>定时轮换 owner 名单，定时可配置，例如每天轮换，或者每周轮换。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>例如站会的提醒效果图如下所示：&lt;/p>
&lt;p>&lt;img src="https://storage.guangzhengli.com/images/screenshotr_2023-2-19T17-12-28.png" alt="screenshotr_2023-2-19T17-12-28">&lt;/p>
&lt;h2 id="技术选型">技术选型&lt;/h2>
&lt;p>在业务需求确定后，首先需要判断系统是否要求高可用、可扩展或者性能是否有要求。在这个用例中，这些技术要求都可以不要，毕竟只是自用的辅助手段，就算偶尔挂了也无所谓。这也为后续的技术选型打开了道路。&lt;/p>
&lt;p>其次需要预估该功能的资源需求，该功能每天定时发送的请求给 Chat 一般不超过 10 条，所以假设 &lt;code>Request / Day = 10&lt;/code>。存储的话需要存储会议的轮换名单，名字占用很少，所以预估最大就是 1KB &lt;code>Size of storage = 1KB&lt;/code>。&lt;/p>
&lt;p>得到技术需求和资源预估后，就能在后续技术选型时有比较明确的方向。首先列出几个可以完成这个功能的方案：&lt;/p>
&lt;ul>
&lt;li>Local machine + Disk&lt;/li>
&lt;li>Cloud VM + Disk&lt;/li>
&lt;li>Serverless
&lt;ul>
&lt;li>AWS Lambda + DynamoDB&lt;/li>
&lt;li>Azure Function + CosmosDB&lt;/li>
&lt;li>Cloudflare Worker + Worker KV&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="local-machine--disk">Local machine &amp;amp; Disk&lt;/h2>
&lt;p>首先我们尝试使用 Python 或者任意语言在本地环境进行 Schedule 定时，直接使用本地环境进行部署运行，因为不要求高可用，偶尔的服务宕机可以接受，所以在追求最简单的方式来实现也未尝不可。&lt;/p>
&lt;p>方案是使用 Python schedule 库或者任意语言定时发送消息，使用本地文件来存储轮换名单。优点是在本地部署调试和管理起来比较方便，不需要额外的花费，缺点是必须保证 Python 定时进程存活和网络可用，一旦电脑关机或者你请假时就不可用了🤔。如下代码 Demo 是从同目录下 &lt;code>code_review.txt&lt;/code> 文件中拿到当前会议 Owner 名字和下一个 Owner 的名字，一起发送 Code Review 提醒给企业微信。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> posixpath &lt;span style="color:#f92672">import&lt;/span> split
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> corpwechatbot.chatbot &lt;span style="color:#f92672">import&lt;/span> CorpWechatBot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> schedule
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> datetime &lt;span style="color:#f92672">import&lt;/span> datetime
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>message &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;Code Review马上开始啦
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">-----------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">ZOOM URL: https://xxx.zoom.us/j/xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ID: xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Passcode: xxx
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">-----------------------------
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">今天的 host 是: &lt;/span>&lt;span style="color:#e6db74">{current_owner}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">明天的 host 是: &lt;/span>&lt;span style="color:#e6db74">{next_owner}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">get_code_review_owner_name&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;code_review.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;r&amp;#39;&lt;/span>, encoding&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name_array &lt;span style="color:#f92672">=&lt;/span> f&lt;span style="color:#f92672">.&lt;/span>read()&lt;span style="color:#f92672">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_owner &lt;span style="color:#f92672">=&lt;/span> name_array[&lt;span style="color:#ae81ff">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> next_owner &lt;span style="color:#f92672">=&lt;/span> name_array[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name_array&lt;span style="color:#f92672">.&lt;/span>insert(len(name_array), name_array&lt;span style="color:#f92672">.&lt;/span>pop(&lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> write_txt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>join(name_array)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f &lt;span style="color:#f92672">=&lt;/span> open(&lt;span style="color:#e6db74">&amp;#39;code_review.txt&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;w&amp;#39;&lt;/span>, encoding&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;utf-8&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(write_txt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>close
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> current_owner, next_owner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">send_notification&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_owner, next_owner &lt;span style="color:#f92672">=&lt;/span> get_code_review_owner_name()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> send_message &lt;span style="color:#f92672">=&lt;/span> message&lt;span style="color:#f92672">.&lt;/span>format(current_owner&lt;span style="color:#f92672">=&lt;/span>current_owner, next_owner&lt;span style="color:#f92672">=&lt;/span>next_owner)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bot &lt;span style="color:#f92672">=&lt;/span> CorpWechatBot(key&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;key providerd by wechat work&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bot&lt;span style="color:#f92672">.&lt;/span>send_text(content&lt;span style="color:#f92672">=&lt;/span>send_message, mentioned_list&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#39;@all&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>monday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>tuesday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>wednesday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>thursday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>schedule&lt;span style="color:#f92672">.&lt;/span>every()&lt;span style="color:#f92672">.&lt;/span>friday&lt;span style="color:#f92672">.&lt;/span>at(&lt;span style="color:#e6db74">&amp;#34;17:00&amp;#34;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>do(send_notification)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schedule&lt;span style="color:#f92672">.&lt;/span>run_pending()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#f92672">.&lt;/span>sleep(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cloud-vm--disk">Cloud VM &amp;amp; Disk&lt;/h3>
&lt;p>第二个方案使用云服务器来运行定时进程，和第一个方案使用的技术栈和代码相同，可以用任意语言定时发送消息，只需要注意服务器时区问题即可。区别在于该方案需要购买云服务器来部署，不用在意关机或者不可用问题，但是在目前这种技术需求和资源需求下，去买一个云服务器完成该功能肯定是不划算的。&lt;/p>
&lt;p>以上两种方案都有各自的优缺点，一种是可用性不高，一种是费用高，所以接下来最后一种 Serverless 方案，即是可以解决这两种问题的方案，也是我们今天主要需要讲的方案。&lt;/p>
&lt;h2 id="serverless">Serverless&lt;/h2>
&lt;p>最后一种也是今天主要聊的方案，即使用无服务器计算的方式来完成定时计算，发送消息给 Chat Webhook 服务器。&lt;/p>
&lt;p>无服务器计算（serverless computing），是一种由云服务商（AWS，Azure 或 Cloudflare）负责通过动态分配资源来执行一段代码的执行模型，并且仅收取运行代码所使用资源的费用。该代码通常运行在无状态的容器中，能够被包括HTTP请求、调度事件（cron任务）等各种事件触发并运行。因为代码运行在无状态的容器中，所以无法存储数据，对此云服务商提供了不同类型的存储服务和 SDK，可以无缝衔接对应厂商提供的 Serverless。&lt;/p>
&lt;p>在之前分析技术需求时，我们了解到该应用的 &lt;code>Request / Day &amp;lt; 10&lt;/code>，每天所需的 CPU 时间很少，所以使用 serverless 来执行定时发送消息的任务非常的合适。主要原因一是基础设施由云服务商提供，可用性方面有一定的保证，二是价格非常便宜(这也是 serverless 普及的最重要的原因)。下面是各大云服务商提供的每月免费额度，我们这个项目每个月用不到免费额度的万分之一。&lt;/p>
&lt;ul>
&lt;li>AWS Lamda: 128M + 3,200,000S / 1 month&lt;/li>
&lt;li>Azure Function: 1 million requests / 1 month&lt;/li>
&lt;li>Cloudflare Workers: 100,000 requests / 1 month&lt;/li>
&lt;/ul>
&lt;p>由于 serverless 是不提供存储功能的，所以需要存储人员轮换名单的话，光靠 serverless 的无状态容器就不够用了。需要用到各大云服务商提出的不同类型存储服务，比如有关系型数据库、NoSQL、KV，甚至是基于 SQLite 的 &lt;code>serverless database&lt;/code>，例如 &lt;a href="https://blog.cloudflare.com/introducing-d1/">Cloudflare D1&lt;/a>。回顾我们需要存储的数据，只是简单的团队人员名单，所以无需使用结构化的数据，只需要很简单的 KV 存储即可。如下面几个 KV 服务和其对应的云厂商的免费额度：&lt;/p>
&lt;ul>
&lt;li>AWS DynamoDB：25GB Storage + 1G Networks&lt;/li>
&lt;li>Azure CosmosDB: 1000 request per-second + 25GB storage&lt;/li>
&lt;li>Cloudflare Workers KV: 1GB storage&lt;/li>
&lt;/ul>
&lt;p>由于 Cloudflare 原生提供绑定域名和提供 &lt;code>serverless database&lt;/code>，所以笔者比较喜欢使用 Cloudflare Workers (不过可用性方面个人认为不如 AWS，偶尔会定时无效)。这里就以 Cloudflare Workers 为例展示功能代码，代码主要分为两个 &lt;code>serverless application&lt;/code>，也就是两个定时任务，一是定时发送消息给 Chat 提供的 webhook 地址，另一个是定时轮换主持会议的 owner 名单。&lt;/p>
&lt;p>首先是定时发送消息给 Chat 提供的 webhook 地址，从 KV 中获取当前的会议 Owner，会议地址和消息，通过获取配置的 webhook 地址发送给对应的 Chat（企业微信或者 Google Chat）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">send_google_chat_message&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./google_chat_notificaiton&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">send_wework_chat_message&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./wework_chat_notificaiton&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#a6e22e">scheduled&lt;/span>(&lt;span style="color:#a6e22e">controller&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">standup_owner_name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">get_owner_name&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">KV_STANDUP_OWNER_NAMES&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`今日的站会马上开始!!!\n今日站会 owner 是: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">standup_owner_name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">\n会议地址是: https://zoom.us/j/xxxx`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">MESSAGE_TYPE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;GoogleChat&amp;#39;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">send_google_chat_message&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">MESSAGE_TYPE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;WeworkChat&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">send_wework_chat_message&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">get_owner_name&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">namesString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">notification_namespace&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">namesString&lt;/span>.&lt;span style="color:#a6e22e">split&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>二是定时轮换人员名单，这里主要是因为 owner 人员的轮换和会议主持时间可能不同步，例如每周轮换一次 Owner，明天发送 owner 主持的消息，所以需要单独的一个定时。下面代码实例展示周五发送轮换 owner 的消息。从 KV 中获取下一个 onwer 列表，轮换名单，并且 push 到 KV 中以便后续发送会议消息时拿到 owner 名单。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">send_google_chat_message&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./google_chat_notificaiton&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">send_wework_chat_message&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;./wework_chat_notificaiton&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">default&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#a6e22e">scheduled&lt;/span>(&lt;span style="color:#a6e22e">controller&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">ctx&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">next_standup_owner_name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">getAndRotateOwners&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">KV_STANDUP_OWNER_NAMES&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`Happy Friday! 别忘记填写 timecard 哦!!!\n下周站会 owner 是: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">next_standup_owner_name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">MESSAGE_TYPE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;GoogleChat&amp;#39;&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">send_google_chat_message&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">MESSAGE_TYPE&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;WeworkChat&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">send_wework_chat_message&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getAndRotateOwners&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">namesString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">notification_namespace&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">type&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">namesString&lt;/span>.&lt;span style="color:#a6e22e">split&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">names&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">names&lt;/span>.&lt;span style="color:#a6e22e">shift&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">storeNameString&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span>.&lt;span style="color:#a6e22e">join&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">notification_namespace&lt;/span>.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#a6e22e">type&lt;/span>, &lt;span style="color:#a6e22e">storeNameString&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">names&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整的项目代码放在这个 &lt;a href="https://github.com/guangzhengli/workers-webhook-notification">仓库&lt;/a> 👈&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>回顾整个开发流程，我们能很轻易的感受到 serverless 的易用性和潜力，像类似于 WebHook、数据统计分析、Trigger 及定时任务和 Chat 机器人等功能，借用于 serverless 可以轻易的实现和部署，完成系统的原型设计和想法的闭环。近几年业界也在不断完善 serverless 的开发流程和核心缺陷，例如 &lt;a href="https://www.infoq.com/news/2022/12/aws-lambda-snapstart-accelerate/">JVM 冷启动问题&lt;/a>，&lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/telemetry-api.html">serverless 观测和调试增强&lt;/a>，数据库 serverless 化如&lt;a href="https://github.com/wundergraph/wunderbase">wunderbase&lt;/a>，&lt;a href="https://neon.tech/?utm_campaign=newsletter">Neon&lt;/a>，&lt;a href="https://planetscale.com/">planetscale&lt;/a>，&lt;a href="https://blog.cloudflare.com/introducing-d1/">D1&lt;/a> 等项目。假以时日，当这些问题慢慢解决和优化，serverless 广阔的前景和强大将刷新人们的认知。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://sst.dev/chapters/zh/what-is-serverless.html">https://sst.dev/chapters/zh/what-is-serverless.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.cloudflare.com/introducing-d1/">https://blog.cloudflare.com/introducing-d1/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aws.amazon.com/free/">https://aws.amazon.com/free/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://azure.microsoft.com/en-us/pricing/free-services/">https://azure.microsoft.com/en-us/pricing/free-services/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.infoq.com/news/2022/12/aws-lambda-snapstart-accelerate/">https://www.infoq.com/news/2022/12/aws-lambda-snapstart-accelerate/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/wundergraph/wunderbase">https://github.com/wundergraph/wunderbase&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sqlite.org/serverless.html">https://www.sqlite.org/serverless.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/neondatabase/neon">https://github.com/neondatabase/neon&lt;/a>&lt;/li>
&lt;/ol></description></item></channel></rss>